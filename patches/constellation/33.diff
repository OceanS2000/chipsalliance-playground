diff --git a/src/main/scala/protocol/AXI4.scala b/src/main/scala/protocol/AXI4.scala
index bbaaf3b..b2adecb 100644
--- a/src/main/scala/protocol/AXI4.scala
+++ b/src/main/scala/protocol/AXI4.scala
@@ -58,7 +58,7 @@ class AXI4MasterToNoC(
   val requestWIO = awIn.io.deq.bits.out.asBools
 
   val in = Wire(new AXI4Bundle(wideBundle))
-  in :<> io.axi4
+  in :<>= io.axi4
 
   // Handle size = 1 gracefully (Chisel3 empty range is broken)
   def trim(id: UInt, size: Int) = if (size <= 1) 0.U else id(log2Ceil(size)-1, 0)
@@ -185,7 +185,7 @@ class AXI4SlaveToNoC(
   val out = Wire(new AXI4Bundle(wideBundle))
   val out_w_in_head = Wire(Bool())
   val out_w_in_id = Wire(UInt((1 << wideBundle.idBits).W))
-  io.axi4 :<> out
+  io.axi4 :<>= out
 
   // Grab the port ID mapping
   val inputIdRanges = AXI4Xbar.mapInputIds(edgesIn.map(_.master))
diff --git a/src/main/scala/router/Router.scala b/src/main/scala/router/Router.scala
index 8014940..6d349dd 100644
--- a/src/main/scala/router/Router.scala
+++ b/src/main/scala/router/Router.scala
@@ -203,7 +203,8 @@ class Router(
       util_ctr := util_ctr + fire
       fired := fired || fire
       when (sample_rate =/= 0.U && debug_sample === sample_rate - 1.U && fired) {
-        printf(s"nocsample %d $s %d\n", debug_tsc, util_ctr);
+        val fmtStr = s"nocsample %d $s %d\n"
+        printf(fmtStr, debug_tsc, util_ctr);
         fired := fire
       }
     }
diff --git a/src/main/scala/test/TestHarness.scala b/src/main/scala/test/TestHarness.scala
index 8592765..05aa4b8 100644
--- a/src/main/scala/test/TestHarness.scala
+++ b/src/main/scala/test/TestHarness.scala
@@ -198,15 +198,16 @@ class NoCTester(inputParams: Seq[IngressChannelParams], outputParams: Seq[Egress
 
     when (o.flit.fire()) {
 
-      assert(rob_valids(rob_idx), s"out[$i] unexpected response")
-      assert(rob_payload(rob_idx).asUInt === o.flit.bits.payload.asUInt, s"out[$i] incorrect payload");
-      assert(o.flit.bits.ingress_id === rob_ingress_id(rob_idx), s"out[$i] incorrect source")
-      assert(i.U === rob_egress_id(rob_idx), s"out[$i] incorrect destination")
-      assert(rob_flits_returned(rob_idx) < rob_n_flits(rob_idx), s"out[$i] too many flits returned")
+      assert(rob_valids(rob_idx), cf"out[${i.toString}] unexpected response")
+      assert(rob_payload(rob_idx).asUInt === o.flit.bits.payload.asUInt, cf"out[${i.toString}] incorrect payload");
+      assert(o.flit.bits.ingress_id === rob_ingress_id(rob_idx), cf"out[${i.toString}] incorrect source")
+      assert(i.U === rob_egress_id(rob_idx), cf"out[${i.toString}] incorrect destination")
+      assert(rob_flits_returned(rob_idx) < rob_n_flits(rob_idx), cf"out[${i.toString}] too many flits returned")
       assert((!packet_valid && o.flit.bits.head) || rob_idx === packet_rob_idx)
 
       when (o.flit.bits.head && enable_print_latency) {
-        printf(s"%d, $i, %d\n", rob_ingress_id(rob_idx), tsc - out_payload.tsc)
+        val fmtStr = s"%d, $i, %d\n"
+        printf(fmtStr, rob_ingress_id(rob_idx), tsc - out_payload.tsc)
       }
 
       rob_flits_returned(rob_idx) := rob_flits_returned(rob_idx) + 1.U
@@ -225,7 +226,7 @@ class NoCTester(inputParams: Seq[IngressChannelParams], outputParams: Seq[Egress
 
   for (i <- 0 until robSz) {
     when (rob_valids(i)) {
-      assert(tsc - rob_tscs(i) < (16 << 10).U, s"ROB Entry $i took too long")
+      assert(tsc - rob_tscs(i) < (16 << 10).U, cf"ROB Entry ${i.toString} took too long")
     }
   }
 }
