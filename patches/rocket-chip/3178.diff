diff --git a/src/main/scala/util/Annotations.scala b/src/main/scala/util/Annotations.scala
index c64d3f8891f..5bce7335cd3 100644
--- a/src/main/scala/util/Annotations.scala
+++ b/src/main/scala/util/Annotations.scala
@@ -45,7 +45,7 @@ case class ParamsAnnotation(target: Named, paramsClassName: String, params: Map[
 }
 
 case class ParamsChiselAnnotation[T <: Product](target: InstanceId, params: T) extends ChiselAnnotation {
-  private val paramMap = params.getClass.getDeclaredFields.map(_.getName).zip(params.productIterator).toMap
+  private val paramMap = params.getClass.getDeclaredFields.map(_.getName).zip(params.productIterator.to).toMap
   def toFirrtl = ParamsAnnotation(target.toNamed, params.getClass.getName, paramMap)
 }
 
diff --git a/src/main/scala/util/Location.scala b/src/main/scala/util/Location.scala
index 5234eb0ccfa..27d4ddb1b7f 100644
--- a/src/main/scala/util/Location.scala
+++ b/src/main/scala/util/Location.scala
@@ -19,6 +19,8 @@ object Location {
 }
 
 class LocationMap[T] private (val internalMap: Map[String, T]) extends Map[Location[_], T] {
+  def +=(kv: (Location[_], T)) = {(internalMap += (kv._1.name -> kv._2)); this}
+  def -=(key: Location[_]) = {(internalMap -= key.name); this}
   def addOne(kv: (Location[_], T)) = { (internalMap += (kv._1.name -> kv._2)); this }
   def subtractOne(key: Location[_]) = { (internalMap -= key.name); this }
   def get(key: Location[_]) = internalMap.get(key.name)
