diff --git a/src/main/scala/devices/mockaon/MockAON.scala b/src/main/scala/devices/mockaon/MockAON.scala
index 43b74e0..7448cf9 100644
--- a/src/main/scala/devices/mockaon/MockAON.scala
+++ b/src/main/scala/devices/mockaon/MockAON.scala
@@ -2,7 +2,7 @@ package sifive.blocks.devices.mockaon
 
 import Chisel.{defaultCompileOptions => _, _}
 import freechips.rocketchip.util.CompileOptions.NotStrictInferReset
-import chisel3.MultiIOModule
+import chisel3.Module
 import freechips.rocketchip.config.Parameters
 import freechips.rocketchip.regmapper._
 import freechips.rocketchip.tilelink._
@@ -50,7 +50,7 @@ trait HasMockAONBundleContents extends Bundle {
   val resetCauses = new ResetCauses().asInput
 }
 
-trait HasMockAONModuleContents extends MultiIOModule with HasRegMap {
+trait HasMockAONModuleContents extends Module with HasRegMap {
   val io: HasMockAONBundleContents
   val params: MockAONParams
   val c = params
diff --git a/src/main/scala/devices/mockaon/RTC.scala b/src/main/scala/devices/mockaon/RTC.scala
index 20823a5..92e7b60 100644
--- a/src/main/scala/devices/mockaon/RTC.scala
+++ b/src/main/scala/devices/mockaon/RTC.scala
@@ -3,13 +3,13 @@ package sifive.blocks.devices.mockaon
 import Chisel.{defaultCompileOptions => _, _}
 import freechips.rocketchip.util.CompileOptions.NotStrictInferReset
 import Chisel.ImplicitConversions._
-import chisel3.MultiIOModule
+import chisel3.Module
 import freechips.rocketchip.util.AsyncResetReg
 import freechips.rocketchip.regmapper.RegFieldDesc
 
 import sifive.blocks.util.{SlaveRegIF, GenericTimer, GenericTimerIO, DefaultGenericTimerCfgDescs}
 
-class RTC extends MultiIOModule with GenericTimer {
+class RTC extends Module with GenericTimer {
 
   protected def prefix = "rtc"
   protected def countWidth = 48
diff --git a/src/main/scala/devices/mockaon/WatchdogTimer.scala b/src/main/scala/devices/mockaon/WatchdogTimer.scala
index 6b58462..42d855a 100644
--- a/src/main/scala/devices/mockaon/WatchdogTimer.scala
+++ b/src/main/scala/devices/mockaon/WatchdogTimer.scala
@@ -3,7 +3,7 @@ package sifive.blocks.devices.mockaon
 import Chisel.{defaultCompileOptions => _, _}
 import freechips.rocketchip.util.CompileOptions.NotStrictInferReset
 import Chisel.ImplicitConversions._
-import chisel3.MultiIOModule
+import chisel3.Module
 import freechips.rocketchip.util.AsyncResetReg
 import freechips.rocketchip.regmapper.{RegFieldDesc}
 
@@ -21,7 +21,7 @@ object WatchdogTimer {
   val key = 0x51F15E
 }
 
-class WatchdogTimer extends MultiIOModule with GenericTimer {
+class WatchdogTimer extends Module with GenericTimer {
   protected def prefix = "wdog"
   protected def countWidth = 31
   protected def cmpWidth = 16
diff --git a/src/main/scala/devices/pwm/PWM.scala b/src/main/scala/devices/pwm/PWM.scala
index 5340a99..6b94635 100644
--- a/src/main/scala/devices/pwm/PWM.scala
+++ b/src/main/scala/devices/pwm/PWM.scala
@@ -3,7 +3,7 @@ package sifive.blocks.devices.pwm
 import Chisel.{defaultCompileOptions => _, _}
 import freechips.rocketchip.util.CompileOptions.NotStrictInferReset
 import Chisel.ImplicitConversions._
-import chisel3.MultiIOModule
+import chisel3.Module
 
 import freechips.rocketchip.config.{Field, Parameters}
 import freechips.rocketchip.diplomacy._
@@ -21,7 +21,7 @@ import freechips.rocketchip.util._
 import sifive.blocks.util._
 
 // Core PWM Functionality  & Register Interface
-class PWMTimer(val ncmp: Int = 4, val cmpWidth: Int = 16, val prefix: String = "pwm") extends MultiIOModule with GenericTimer {
+class PWMTimer(val ncmp: Int = 4, val cmpWidth: Int = 16, val prefix: String = "pwm") extends Module with GenericTimer {
 
   def orR(v: Vec[Bool]): Bool = v.foldLeft(Bool(false))( _||_ )
   protected def countWidth = ((1 << scaleWidth) - 1) + cmpWidth
@@ -29,7 +29,7 @@ class PWMTimer(val ncmp: Int = 4, val cmpWidth: Int = 16, val prefix: String = "
   protected lazy val feed = count.carryOut(scale + UInt(cmpWidth))
   protected lazy val countEn = Wire(Bool())
   override protected lazy val oneShot = RegEnable(io.regs.cfg.write.running && !countReset, Bool(false), (io.regs.cfg.write_running && unlocked) || countReset)
-  override protected lazy val extra: Vec[Bool]  = RegEnable(io.regs.cfg.write.extra, init = Vec.fill(maxcmp){false.B}, orR(io.regs.cfg.write_extra) && unlocked)
+  override protected lazy val extra: Vec[Bool]  = RegEnable(io.regs.cfg.write.extra, Vec.fill(maxcmp){false.B}, orR(io.regs.cfg.write_extra) && unlocked)
   override protected lazy val center: Vec[Bool] = RegEnable(io.regs.cfg.write.center, orR(io.regs.cfg.write_center) && unlocked)
   override protected lazy val gang: Vec[Bool] = RegEnable(io.regs.cfg.write.gang, orR(io.regs.cfg.write_gang) && unlocked)
   override protected lazy val deglitch = RegEnable(io.regs.cfg.write.deglitch, io.regs.cfg.write_deglitch && unlocked)(0)
diff --git a/src/main/scala/devices/spi/TLSPI.scala b/src/main/scala/devices/spi/TLSPI.scala
index 9398f1a..a150eb3 100644
--- a/src/main/scala/devices/spi/TLSPI.scala
+++ b/src/main/scala/devices/spi/TLSPI.scala
@@ -95,7 +95,7 @@ class SPITopModule(c: SPIParamsBase, outer: TLSPIBase)
     SPICRs.csdef -> ctrl.cs.dflt.zipWithIndex.map{ case (x, i) => RegField(1, x,
                     RegFieldDesc(s"csdef$i", s"Chip select ${i} default", group = Some("csdef"), groupDesc = Some("Chip select default"), reset=Some(1)))},
     SPICRs.csmode -> Seq(RegField(SPICSMode.width, ctrl.cs.mode,
-                         RegFieldDesc("csmode", "Chip select mode", reset=Some(SPICSMode.Auto.litValue())))),
+                         RegFieldDesc("csmode", "Chip select mode", reset=Some(SPICSMode.Auto.litValue)))),
     SPICRs.dcssck -> Seq(RegField(c.delayBits, ctrl.dla.cssck,
                          RegFieldDesc("cssck", "CS to SCK delay", reset=Some(1)))),
     SPICRs.dsckcs -> Seq(RegField(c.delayBits, ctrl.dla.sckcs,
@@ -107,11 +107,11 @@ class SPITopModule(c: SPIParamsBase, outer: TLSPIBase)
 
     SPICRs.fmt -> RegFieldGroup("fmt",Some("Serial frame format"),Seq(
       RegField(SPIProtocol.width, ctrl.fmt.proto,
-               RegFieldDesc("proto","SPI Protocol", reset=Some(SPIProtocol.Single.litValue()))),
+               RegFieldDesc("proto","SPI Protocol", reset=Some(SPIProtocol.Single.litValue))),
       RegField(SPIEndian.width, ctrl.fmt.endian,
-               RegFieldDesc("endian","SPI Endianness", reset=Some(SPIEndian.MSB.litValue()))),
+               RegFieldDesc("endian","SPI Endianness", reset=Some(SPIEndian.MSB.litValue))),
       RegField(SPIDirection.width, ctrl.fmt.iodir,
-               RegFieldDesc("iodir","SPI I/O Direction", reset=Some(SPIDirection.Rx.litValue()))))),
+               RegFieldDesc("iodir","SPI I/O Direction", reset=Some(SPIDirection.Rx.litValue))))),
     SPICRs.len -> Seq(RegField(c.lengthBits, ctrl.fmt.len,
                       RegFieldDesc("len","Number of bits per frame", reset=Some(math.min(c.frameBits, 8))))),
 
diff --git a/src/main/scala/devices/wdt/TLWDT.scala b/src/main/scala/devices/wdt/TLWDT.scala
index d9f6cae..49bef5d 100644
--- a/src/main/scala/devices/wdt/TLWDT.scala
+++ b/src/main/scala/devices/wdt/TLWDT.scala
@@ -3,7 +3,7 @@ package sifive.blocks.devices.wdt
 import Chisel.{defaultCompileOptions => _, _}
 import freechips.rocketchip.util.CompileOptions.NotStrictInferReset
 import Chisel.ImplicitConversions._
-import chisel3.MultiIOModule
+import chisel3.Module
 
 import freechips.rocketchip.config.{Field, Parameters}
 import freechips.rocketchip.diplomacy._
